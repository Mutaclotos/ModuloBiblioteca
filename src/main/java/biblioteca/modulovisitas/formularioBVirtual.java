package biblioteca.modulovisitas;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container.ItemSetChangeEvent;
import com.vaadin.data.Container.ItemSetChangeListener;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.event.FieldEvents.FocusEvent;
import com.vaadin.event.FieldEvents.FocusListener;
import com.vaadin.server.Page;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Upload.Receiver;
import com.vaadin.ui.Upload.SucceededEvent;
import com.vaadin.ui.Upload.SucceededListener;

public class formularioBVirtual extends CustomComponent {
	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private TextArea inputDescriptores;

	@AutoGenerated
	private TextArea inputAutor;

	@AutoGenerated
	private AbsoluteLayout absoluteLayout_2;

	@AutoGenerated
	private Label nombreArchivo;

	@AutoGenerated
	private Upload upload_1;

	@AutoGenerated
	private CheckBox checkBoxSi;

	@AutoGenerated
	private TextField inputEdicion;

	@AutoGenerated
	private Label labelReferencia;

	@AutoGenerated
	private Label labelEdicion;

	@AutoGenerated
	private Button botonGuardar;

	@AutoGenerated
	private Label labelFechaHora;

	@AutoGenerated
	private Label labelAnio;

	@AutoGenerated
	private TextField inputEditorial;

	@AutoGenerated
	private TextField inputAnio;

	@AutoGenerated
	private Label labelDescriptores;

	@AutoGenerated
	private ComboBox inputSoy;

	@AutoGenerated
	private TextField inputTitulo;

	@AutoGenerated
	private Label labelEditorial;

	@AutoGenerated
	private Label label_Titu;

	@AutoGenerated
	private Label labelAutor;

	@AutoGenerated
	private Label labelSignatura;

	@AutoGenerated
	private TextField inputSignatura;

	@AutoGenerated
	private Label labelNuevaEntrada;

	public static final long serialVersionUID = 1202;
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private DBConnector dbc;
	
	private boolean archivoRecibidoExitosamente = false;
	private Path pathArchivos;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public formularioBVirtual(String rutaArchivos) {
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.nombreArchivo.setValue("");
		pathArchivos = Paths.get(rutaArchivos);
		dbc = new DBConnector("192.168.56.101","root","GESAVA954");
		
		String timeStamp = new SimpleDateFormat("dd/MM/YYYY HH:mm").format(Calendar.getInstance().getTime());
		labelFechaHora.setValue(timeStamp);

		this.inputSoy.setContainerDataSource(Contenedor.obtenerContenedorTipoDocumento());
		//this.comboBox_Elegir.setContainerDataSource(Contenedor.obtenerContenedorTipoArchivo());
		this.inputSoy.setImmediate(true);
		this.labelEdicion.setImmediate(true);
		this.labelEditorial.setImmediate(true);
		this.inputEdicion.setImmediate(true);
		this.inputSoy.addValueChangeListener(new ValueChangeListener() {
			private static final long serialVersionUID = 34097123L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(inputSoy.getValue()!=null){
					switch(inputSoy.getValue().toString()){
						case "Libro":
							labelEditorial.setValue("Editorial");
							labelEdicion.setValue("Edicion");
							labelEdicion.setVisible(true);
							inputEdicion.setVisible(true);
							inputEdicion.setValue("");
						break;
						case "Revista":
							labelEditorial.setValue("Editorial");
							labelEdicion.setValue("Volumen");
							inputEdicion.setVisible(true);
							labelEdicion.setVisible(true);
							inputEdicion.setValue("");
						break;
						case "Tesis":
							labelEditorial.setValue("Institucion");
							labelEdicion.setVisible(false);
							inputEdicion.setValue(null);
							inputEdicion.setVisible(false);
						break;
					}
				}
			}
		});
		/*this.inputSoy.addBlurListener(new BlurListener(){

			@Override
			public void blur(BlurEvent event) {
				if(inputSoy.getValue()!=null){
					switch(inputSoy.getValue().toString()){
						case "Libro":
							labelEditorial.setValue("Editorial");
							labelEdicion.setValue("Edicion");
							labelEdicion.setVisible(true);
							inputEdicion.setVisible(true);
							inputEdicion.setValue("");
						break;
						case "Revista":
							labelEditorial.setValue("Editorial");
							labelEdicion.setValue("Volumen");
							inputEdicion.setVisible(true);
							labelEdicion.setVisible(true);
							inputEdicion.setValue("");
						break;
						case "Tesis":
							labelEditorial.setValue("Institucion");
							labelEdicion.setVisible(false);
							inputEdicion.setValue(null);
							inputEdicion.setVisible(false);
						break;
					}
				}
			}
			
		});*/
		final Uploader up = new Uploader();
		this.upload_1.addSucceededListener(up);
		this.upload_1.setReceiver(up);
		
		botonGuardar.addClickListener(new ClickListener(){
			private static final long serialVersionUID = 47254532L;
			@Override
			public void buttonClick(ClickEvent event) {
				String signatura = inputSignatura.getValue();
				String titulo = inputTitulo.getValue();
				String numero = inputEdicion.getValue();
				String anio = inputAnio.getValue();
				String editorial = inputEditorial.getValue();
				String tipo = inputSoy.getValue().toString();
				String autor = inputAutor.getValue();
				String descriptor = inputDescriptores.getValue();
				
				//TODO verificar campos
				
				if(!checkBoxSi.getValue() && !archivoRecibidoExitosamente){
					new Notification("A seleccionado que es una entrada que no es referencia, debe indicar un archivo!",
                            Notification.Type.ERROR_MESSAGE)
					.show(Page.getCurrent());
					return;// break;
				}
				
				dbc.insert("documento",signatura,titulo,numero,anio,editorial,tipo,up.fileName);
				String[] autores = autor.split(",");
				for(int i=0;i<autores.length;++i){
					System.out.println(autores[i]);
					dbc.insert("autor", null, autores[i]);
					ResultSet rs = dbc.query("SELECT id FROM autor WHERE nombre = '"+autores[i]+"'");
					try {
						if(rs!=null && rs.next()){
							int idAutor = rs.getInt("id");
							dbc.insert("documentoautor", signatura,idAutor+"");
						}
					} catch (SQLException e) {e.printStackTrace();}
				}
				String[] descriptores = descriptor.split(",");
				for(int i=0;i<descriptores.length;++i){
					System.out.println(descriptores[i]);
					dbc.insert("descriptor", descriptores[i],signatura);
				}
				inputSignatura.setValue("");
				inputTitulo.setValue("");
				inputEdicion.setValue("");
				inputAnio.setValue("");
				inputEditorial.setValue("");
				inputAutor.setValue("");
				inputDescriptores.setValue("");
				upload_1.setVisible(true);
				nombreArchivo.setValue("");
				up.fileName = null;
			}
		});
	}

	private class Uploader implements Receiver, SucceededListener {
	    /**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		public File file;
	    public String fileName = null;
	    public OutputStream receiveUpload(String filename,
	                                      String mimeType) {
	        FileOutputStream fos = null;
	        this.fileName = filename; 
	        try {
	            file = new File(pathArchivos +"/"+ filename);
	            fos = new FileOutputStream(file);
	        } catch (final java.io.FileNotFoundException e) {
	            new Notification("El archivo no se pudo subir! <br/>",
	                             e.getMessage(),
	                             Notification.Type.ERROR_MESSAGE)
	                .show(Page.getCurrent());
	            return null;
	        }
	        return fos;
	    }

	    public void uploadSucceeded(SucceededEvent event) {
	    	archivoRecibidoExitosamente = true;
	    	upload_1.setVisible(false);
	    	nombreArchivo.setValue("Se a selecionado el archivo: " + fileName);
	    }
	};
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("700px");
		mainLayout.setHeight("660px");
		
		// top-level component properties
		setWidth("700px");
		setHeight("660px");
		
		// labelNuevaEntrada
		labelNuevaEntrada = new Label();
		labelNuevaEntrada.setImmediate(false);
		labelNuevaEntrada.setWidth("-1px");
		labelNuevaEntrada.setHeight("-1px");
		labelNuevaEntrada.setValue("Ingresar Nuevo Documento");
		mainLayout.addComponent(labelNuevaEntrada, "top:0.0px;left:256.0px;");
		
		// inputSignatura
		inputSignatura = new TextField();
		inputSignatura.setImmediate(false);
		inputSignatura.setWidth("-1px");
		inputSignatura.setHeight("-1px");
		mainLayout.addComponent(inputSignatura, "top:102.0px;left:109.0px;");
		
		// labelSignatura
		labelSignatura = new Label();
		labelSignatura.setImmediate(false);
		labelSignatura.setWidth("-1px");
		labelSignatura.setHeight("-1px");
		labelSignatura.setValue("Signatura");
		mainLayout.addComponent(labelSignatura, "top:102.0px;left:21.0px;");
		
		// labelAutor
		labelAutor = new Label();
		labelAutor.setImmediate(false);
		labelAutor.setWidth("-1px");
		labelAutor.setHeight("-1px");
		labelAutor.setValue("Autor");
		mainLayout.addComponent(labelAutor, "top:182.0px;left:26.0px;");
		
		// label_Titu
		label_Titu = new Label();
		label_Titu.setImmediate(false);
		label_Titu.setWidth("-1px");
		label_Titu.setHeight("-1px");
		label_Titu.setValue("Titulo");
		mainLayout.addComponent(label_Titu, "top:142.0px;left:26.0px;");
		
		// labelEditorial
		labelEditorial = new Label();
		labelEditorial.setImmediate(false);
		labelEditorial.setWidth("-1px");
		labelEditorial.setHeight("-1px");
		labelEditorial.setValue("Editorial");
		mainLayout.addComponent(labelEditorial, "top:102.0px;left:414.0px;");
		
		// inputTitulo
		inputTitulo = new TextField();
		inputTitulo.setImmediate(false);
		inputTitulo.setWidth("-1px");
		inputTitulo.setHeight("-1px");
		mainLayout.addComponent(inputTitulo, "top:142.0px;left:109.0px;");
		
		// inputSoy
		inputSoy = new ComboBox();
		inputSoy.setImmediate(false);
		inputSoy.setWidth("141px");
		inputSoy.setHeight("25px");
		inputSoy.setInvalidAllowed(false);
		inputSoy.setTabIndex(1);
		mainLayout.addComponent(inputSoy, "top:32.0px;left:259.0px;");
		
		// labelDescriptores
		labelDescriptores = new Label();
		labelDescriptores.setImmediate(false);
		labelDescriptores.setWidth("-1px");
		labelDescriptores.setHeight("-1px");
		labelDescriptores.setValue("Descriptores");
		mainLayout.addComponent(labelDescriptores, "top:340.0px;left:5.0px;");
		
		// inputAnio
		inputAnio = new TextField();
		inputAnio.setImmediate(false);
		inputAnio.setWidth("120px");
		inputAnio.setHeight("-1px");
		mainLayout.addComponent(inputAnio, "top:180.0px;left:489.0px;");
		
		// inputEditorial
		inputEditorial = new TextField();
		inputEditorial.setImmediate(false);
		inputEditorial.setWidth("-1px");
		inputEditorial.setHeight("-1px");
		mainLayout.addComponent(inputEditorial, "top:100.0px;left:489.0px;");
		
		// labelAnio
		labelAnio = new Label();
		labelAnio.setImmediate(false);
		labelAnio.setWidth("-1px");
		labelAnio.setHeight("-1px");
		labelAnio.setValue("Año");
		mainLayout.addComponent(labelAnio, "top:182.0px;left:433.0px;");
		
		// labelFechaHora
		labelFechaHora = new Label();
		labelFechaHora.setImmediate(false);
		labelFechaHora.setWidth("-1px");
		labelFechaHora.setHeight("-1px");
		labelFechaHora.setValue("1/6/2016  14:21");
		mainLayout.addComponent(labelFechaHora, "top:20.0px;left:480.0px;");
		
		// botonGuardar
		botonGuardar = new Button();
		botonGuardar.setCaption("GUARDAR");
		botonGuardar.setImmediate(true);
		botonGuardar.setWidth("200px");
		botonGuardar.setHeight("40px");
		mainLayout.addComponent(botonGuardar, "top:506.0px;left:160.0px;");
		
		// labelEdicion
		labelEdicion = new Label();
		labelEdicion.setImmediate(false);
		labelEdicion.setWidth("-1px");
		labelEdicion.setHeight("-1px");
		labelEdicion.setValue("Edición");
		mainLayout.addComponent(labelEdicion, "top:142.0px;left:419.0px;");
		
		// labelReferencia
		labelReferencia = new Label();
		labelReferencia.setImmediate(false);
		labelReferencia.setWidth("-1px");
		labelReferencia.setHeight("-1px");
		labelReferencia.setValue("Solo Referencia");
		mainLayout.addComponent(labelReferencia, "top:222.0px;left:380.0px;");
		
		// inputEdicion
		inputEdicion = new TextField();
		inputEdicion.setImmediate(false);
		inputEdicion.setWidth("-1px");
		inputEdicion.setHeight("-1px");
		mainLayout.addComponent(inputEdicion, "top:142.0px;left:489.0px;");
		
		// checkBoxSi
		checkBoxSi = new CheckBox();
		checkBoxSi.setCaption("SI");
		checkBoxSi.setImmediate(false);
		checkBoxSi.setWidth("-1px");
		checkBoxSi.setHeight("-1px");
		mainLayout.addComponent(checkBoxSi, "top:222.0px;left:520.0px;");
		
		// absoluteLayout_2
		absoluteLayout_2 = buildAbsoluteLayout_2();
		mainLayout.addComponent(absoluteLayout_2, "top:290.0px;bottom:187.0px;left:359.0px;");
		
		// inputAutor
		inputAutor = new TextArea();
		inputAutor.setImmediate(false);
		inputAutor.setWidth("-1px");
		inputAutor.setHeight("144px");
		mainLayout.addComponent(inputAutor, "top:182.0px;left:109.0px;");
		
		// inputDescriptores
		inputDescriptores = new TextArea();
		inputDescriptores.setImmediate(false);
		inputDescriptores.setWidth("-1px");
		inputDescriptores.setHeight("139px");
		mainLayout.addComponent(inputDescriptores, "top:339.0px;left:109.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private AbsoluteLayout buildAbsoluteLayout_2() {
		// common part: create layout
		absoluteLayout_2 = new AbsoluteLayout();
		absoluteLayout_2.setImmediate(false);
		absoluteLayout_2.setWidth("380px");
		absoluteLayout_2.setHeight("100.0%");
		
		// upload_1
		upload_1 = new Upload();
		upload_1.setCaption("Archivo");
		upload_1.setImmediate(false);
		upload_1.setWidth("247px");
		upload_1.setHeight("50px");
		absoluteLayout_2.addComponent(upload_1, "top:55.0px;left:26.0px;");
		
		// nombreArchivo
		nombreArchivo = new Label();
		nombreArchivo.setImmediate(false);
		nombreArchivo.setWidth("-1px");
		nombreArchivo.setHeight("-1px");
		nombreArchivo.setValue("Label");
		absoluteLayout_2.addComponent(nombreArchivo, "top:18.0px;left:28.0px;");
		
		return absoluteLayout_2;
	}

}
